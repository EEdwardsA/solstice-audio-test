To do / to fix:
* Using a single request to send-and-then-receive data adds variable latency to the received data, since it has to wait in line behind the sent data (and there's no easy way to know how long it waited.)
* Subtle issue: The relative precision of unsynchronized computer clocks is no better than 1ppm (generally 2-10x worse, IIRC.)
* Use request headers instead of query params so that URL doesn't change (forcing CORS preflight to be redone).

Debugging notes from 2020-07-22:
* Weird as fuck: sometimes after it lags, when it comes back the pitch
  is too high? ??? ?????? I have seen it too high by a consistent ~3%
  for many seconds. (1/2 a semitone roughly)
  * iiiinteresting, I can repro this using "main app thread" loopback.
  * this matches with what we see in the visualizer, which is skipping _inside_ a batch sent to the server.
* Clients seem to get further and further behind. I think they are generally stable except when weird shit is happening, but weird shit causes them to slip, and eventually they slip too far and die. Connecting multiple clients seems to make this happen much faster but I can't tell if that's inherent, or just because it increases lossage due to bandwidth, CPU, etc.
  * possibly this is triggered by "non-round" offsets? Hrm, seems not...
  * This may be specific to the bluetooth headset actually, and it may be related to the sporadic glitching I was getting with them many versions ago, which usually goes away if I close and reopen the device.
* Hmmmmmm, under heavy load (3 clients), my request payloads seem to end up empty, even when the source is constant audio data (hamilton). That doesn't make any sense.
* Still need to figure out how to deal with client-side latency? Allegedy the web audio API will tell us about the output latency, but input is ????

Debugging notes from 2020-07-23 w/ jefftk:
* should add an alert if something goes wrong with the fixed-offset relationship between the read and write clocks going to the server
* a speaker-to-mic echo test with clicks seemed quite smooth, which is cool
* outputLatency on the audio context object is never available; also the object claims it is closed, which is weird (maybe there are multiple objects?)
* somehow our write clock is ending up being 512 after the local latency work, so something has gone wrong there
* more automation / ease of use features will be important for fun testing with people
* send email about fun testing this weekend

Time constants:
* Audioworklet "time quantum": 128 samples @ 44,100Hz ~= 3ms
* Our send buffer: SAMPLE_BATCH_SIZE * 128 samples ~= 290ms

Sources of latency to account for:
* Sending:
  * "Outside world latency":
    * Head-to-mic acoustic latency: <= 3ms (about 1ms/ft)
    * [Optional] bluetooth latency: 100-200 ms
    * System/JS audio processing latency: dozens of ms?
    * Buffer latency into audioworklet: ~3ms
  * Client side latency:
    * Buffer latency (our code): ~290ms
  * Network/backend latency:
    * XHR TCP connection establishment: ~1.5x RTT (unless conn is reused)
    * [Optional] wait for single-threaded HTTP server to be free
    * Upload time: Send buffer size / upload bandwidth
* Receiving:
  * [Time from XHR start until receiving begins]
    * This is time we have to compensate for when deciding which audio to ask for, but not inherently latency in getting it
  * Network/backend latency:
    * Download time
  * Client side latency:
    * Buffer latency (our code)
  * "Outside world latency":
    * System/JS audio processing latency
    * Optional bluetooth latency
    * Speaker-to-head acoustic latency

